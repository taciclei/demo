version: '3.4'

services:
  php:
    image: ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/php:${CONTAINER_REGISTRY_TAG:-latest}
    build:
      context: ./api
      target: api_platform_php
#      cache_from: &api_cache_from
#        - ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/php
#        - ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/nginx
#        - ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/varnish
    restart: on-failure
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    depends_on:
      - db
    # Comment out these volumes in production
    volumes:
      - ./api:/srv/api:rw
      # If you develop on Linux, uncomment the following line to use a bind-mounted host directory instead
      #- ./api/var:/srv/api/var:rw
    env_file:
      - ./api/.env
  consumer:
    image: ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/php:${CONTAINER_REGISTRY_TAG:-latest}
    build:
      context: ./api
      target: api_platform_php
      #cache_from: *api_cache_from
    command: bin/console messenger:consume
    restart: on-failure
    healthcheck:
      test: ['CMD', 'ps', 'aux', '|', 'egrep', '"\d+:\d+ php bin/console messenger:consume"']
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 3s
    # Comment out these volumes in production
    volumes:
      - ./api:/srv/api:rw
      # If you develop on Linux, uncomment the following line to use a bind-mounted host directory instead
      #- ./api/var:/srv/api/var:rw
    depends_on:
      - db
    env_file:
      - ./api/.env
  api:
    image: ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/nginx:${CONTAINER_REGISTRY_TAG:-latest}
    build:
      context: ./api
      target: api_platform_nginx
      #cache_from: *api_cache_from
    depends_on:
      - php
      - db
    # Comment out this volume in production
    volumes:
      - ./api/public:/srv/api/public:ro
    ports:
      - "8080:80"
    env_file:
      - ./api/.env
#  cache-proxy:
#    image: ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/varnish:${CONTAINER_REGISTRY_TAG:-latest}
#    build:
#      context: ./api
#      target: api_platform_varnish
#      #cache_from: *api_cache_from
#    depends_on:
#      - api
#    volumes:
#      - ./api/docker/varnish/conf:/usr/local/etc/varnish:ro
#    tmpfs:
#      - /usr/local/var/varnish:exec
#    ports:
#      - "8081:80"

#  db:
#    # In production, you may want to use a managed database service
#    image: bitnami/postgresql:10
#    environment:
#      - POSTGRESQL_DATABASE=api
#      - POSTGRESQL_USERNAME=api-platform
#      # You should definitely change the password in production
#      - POSTGRESQL_PASSWORD=!ChangeMe!
#    volumes:
#      - db-data:/var/lib/postgresql/data:rw
#      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
#      # - ./docker/db/data:/var/lib/postgresql/data:rw
#    ports:
#      - "5432:5432"
  db:
    image: mysql:8
    command: mysqld --default-authentication-plugin=mysql_native_password
    restart: always
    #security_opt:
    #  - seccomp:unconfirmed
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=api-platform
      - MYSQL_PASSWORD=!ChangeMe!
      - MYSQL_DATABASE=api
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - target: 3306
        published: 3306
        protocol: tcp
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      - PMA_HOST=db
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_PASSWORD=!ChangeMe!
      - PMA_USER=api-platform
      - PMA_PASSWORD=!ChangeMe!
      - UPLOAD_LIMIT=1G
    ports:
      - "8181:80"
  mercure:
    # In production, you may want to use the managed version of Mercure, https://mercure.rocks
    image: dunglas/mercure
    environment:
      # You should definitely change all these values in production
      - JWT_KEY=!ChangeMe! # You have to change MERCURE_JWT_TOKEN in api/.env when you change this. You can put the old value of MERCURE_JWT_TOKEN into the debugger on https://jwt.io/ and put the new value of JWT_KEY in the "secret" field to obtain the new encoded value for MERCURE_JWT_TOKEN
      - ALLOW_ANONYMOUS=1
      - CORS_ALLOWED_ORIGINS=*
      - PUBLISH_ALLOWED_ORIGINS=http://localhost:1337 https://localhost:1338
      - DEMO=1
    ports:
      - "1337:80"

  client:
    # Use a static website hosting service in production
    # See https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment
    image: ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/client:${CONTAINER_REGISTRY_TAG:-latest}
    build:
      context: ./client
      cache_from:
        - ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/client
    stdin_open: true # https://github.com/facebook/create-react-app/issues/8688
    env_file:
      - ./client/.env
    volumes:
      - ./client:/usr/src/client:rw,cached
      - /usr/src/client/node_modules
    ports:
      - "80:3000"
      - "5000:5000"

  admin:
    # Use a static website hosting service in production
    # See https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment
    image: ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/admin:${CONTAINER_REGISTRY_TAG:-latest}
    stdin_open: true # https://github.com/facebook/create-react-app/issues/8688
    build:
      context: ./admin
      cache_from:
        - ${CONTAINER_REGISTRY_BASE:-quay.io/api-platform}/admin
    env_file:
      - ./admin/.env
    volumes:
      - ./admin:/usr/src/admin:rw,cached
      - /usr/src/admin/node_modules
    ports:
      - "81:3000"

#  h2-proxy:
#    # Don't use this proxy in prod
#    build:
#      context: ./h2-proxy
#    depends_on:
#      - client
#      - admin
#      - api
#      - cache-proxy
#    ports:
#      - "443:443" # client
#      - "444:444" # admin
#      - "8443:8443" # api
#      - "8444:8444" # cache-proxy
#      - "1338:1338" # mercure

#  blackfire:
#    image: blackfire/blackfire
#    environment:
#      - BLACKFIRE_CLIENT_ID
#      - BLACKFIRE_CLIENT_TOKEN
#      - BLACKFIRE_SERVER_ID
#      - BLACKFIRE_SERVER_TOKEN

volumes:
  db-data: {}
